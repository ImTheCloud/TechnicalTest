import java.util.HashMap;
import java.util.Map;

public class ChangeReturn {

    public static void main(String[] args) { 
        giveChange(1L); 
        giveChange(6L);
        giveChange(10L);
    }

    public static Map<Long, Long> giveChange(long amount) {
        Map<Long, Long> solution = new HashMap<>(); 
        long initialAmount = amount; 
        long numberOfBills = 0; 

        while (amount > 13 || amount == 12 || amount == 10) {
         
            numberOfBills++;
            solution.put(10L, numberOfBills);
            amount -= 10; 
        }

        if (amount % 2 != 0) {
            solution.put(5L, 1L);
            amount -= 5; 
        }

        if (amount == 6) { 
            solution.put(2L, 3L);
            amount = 0;
        } else if (amount == 8) { 
            solution.put(4L, 2L);
            amount = 0;
        } else {
            while (amount > 0) { 
                numberOfBills++;
                solution.put(numberOfBills,2L);
                amount -= 2;
            }
        }

        
        System.out.println("Amount to return: " + initialAmount);
        if (amount == 0) {
            System.out.println("Optimal solution: ");
            for (Map.Entry<Long, Long> entry : solution.entrySet()) {
                System.out.println(entry.getValue() + " * $" + entry.getKey());
            }
        } else {
            System.out.println("Unable to give change.");
        }
        return solution;
    }
}
